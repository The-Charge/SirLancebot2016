// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.SirLancebot2016;

import org.usfirst.frc2619.SirLancebot2016.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;

import org.usfirst.frc2619.SirLancebot2016.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick buttonBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public SendableChooser driveMode;
    public SendableChooser loopMode;
    public SendableChooser autoposition;
    public SendableChooser autoDefenseAgainst;
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonBox = new Joystick(3);
        
        rightJoystick = new Joystick(2);
        
        leftJoystick = new Joystick(1);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("CameraDebug", new CameraDebug());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveMode = new SendableChooser();
        driveMode.addDefault("TankDrive", "tank");
        driveMode.addObject("ArcadeDrive", "arcade");
        driveMode.addObject("XBoxDrive", "xbox");
        driveMode.addObject("ClaytonDrive", "clayton");
        driveMode.addObject("HaloDirve", "halo");
        
        SmartDashboard.putData("Drive Mode", driveMode);
        
        //open/closed loop sendable chooser
        loopMode = new SendableChooser();
        loopMode.addDefault("OpenLoop", ControlMode.PercentOutput);
        loopMode.addObject("ClosedLoop", ControlMode.Velocity);
    
        SmartDashboard.putData("Loop Mode", loopMode);
        
        // Positions for the Autocmds Sendable Chooser:
        autoposition = new SendableChooser();
        autoposition.addDefault("Position 1", 1);
        autoposition.addObject("Position 2", 2);
        autoposition.addObject("Position 3", 3);
        autoposition.addObject("Position 4", 4);
        autoposition.addObject("Position 5", 5);
        autoposition.addObject("Spy Bot", 6);
        autoposition.addObject("Arrive At Defence", 7); //This is for the 2 point value
        
        SmartDashboard.putData("AutonPosition", autoposition);
        
        // Sendable chooser forthe auton position angels
        autoDefenseAgainst = new SendableChooser();
        autoDefenseAgainst.addDefault("Position ang 1", "command1");
        autoDefenseAgainst.addObject("Position ang 2", "command2");
        autoDefenseAgainst.addObject("Position ang 3", "command3");
        autoDefenseAgainst.addObject("Position ang 4", "command4");
        autoDefenseAgainst.addObject("Position ang 5", "command5");
        
        SmartDashboard.putData("AutonAngle", autoDefenseAgainst);
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getButtonBox() {
        return buttonBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

