// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SirLancebot2016.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class CrossChevalDeFriseCG extends CommandGroup {

	double distanceFromStart = 4;  // front bumper needs to start 4ft 10 in from edge of ramps
	double getClose = .65;
	double reverseSoRampsDown = 0;
	double driveOver = 4;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
	public CrossChevalDeFriseCG() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
		// Add Commands here:
		// e.g. addSequential(new Command1());
		// addSequential(new Command2());
		// these will run in order.

		// To run multiple commands at the same time,
		// use addParallel()
		// e.g. addParallel(new Command1());
		// addSequential(new Command2());
		// Command1 and Command2 will run in parallel.

		// A command group will require all of the subsystems that each member
		// would require.
		// e.g. if Command1 requires chassis, and Command2 requires arm,
		// a CommandGroup containing them would require both the chassis and the
		// arm.
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

		// make sure arms are in correct position
		addParallel(new LiftArms());
		addSequential(new LiftShooter());
		
		addSequential(new WaitNseconds(.3));
		// get close to defense
		//addSequential(new DriveXfeet(distanceFromStart));
		addSequential(new DriveSDFeet()); //autonDistance 4.65 autonSpeed .3
		addSequential(new WaitNseconds(.2));
		addSequential(new WristDown());
		
		// make sure arms are over defense
		//addSequential(new DriveXfeet(getClose));
		addSequential(new WaitNseconds(.5));
		// lower arms, then lower wrists and drive back a little
		addSequential(new LowerArms());
		//addSequential(new DriveXfeet(reverseSoRampsDown));
		addSequential(new WaitNseconds(1.5));
		// drive over defense
		//addParallel(new DriveXfeet(driveOver));
		//addSequential(new LiftArms());
	}
}
