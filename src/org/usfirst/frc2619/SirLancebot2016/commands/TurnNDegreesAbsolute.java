// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SirLancebot2016.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2619.MathUtil;
import org.usfirst.frc2619.SirLancebot2016.Robot;

/**
 *
 */
public class TurnNDegreesAbsolute extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_degrees;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private double current_position;
	private final double ACCEPTABLE_ERROR = 1;
	private double speed;
	private Timer onAngle = new Timer();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public TurnNDegreesAbsolute(double degrees) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_degrees = degrees;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		current_position = (Robot.gyroSubsystem.ahrs.getAngle());
		Robot.driveTrain.zeroTo360Angle(m_degrees);
		
		speed = .6;
		onAngle.start();
		this.setTimeout(2);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		current_position = Robot.driveTrain.turnToAbsoluteAngle(current_position, m_degrees, speed);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if(!Robot.driveTrain.atAbsoluteAngle(m_degrees, ACCEPTABLE_ERROR))
    		onAngle.reset();
    	
    	if(onAngle.get() > 1) return true;
    	else return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.setLeftPercentVBus(0);
		Robot.driveTrain.setRightPercentVBus(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
