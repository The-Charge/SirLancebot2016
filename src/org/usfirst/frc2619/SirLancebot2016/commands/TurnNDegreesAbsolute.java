// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.SirLancebot2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2619.SirLancebot2016.Robot;

/**
 *
 */
public class TurnNDegreesAbsolute extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_degrees;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double current_position;
    private double desired;
    private final double ACCEPTABLE_ERROR = 2;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnNDegreesAbsolute(double degrees) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_degrees = degrees;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	current_position = (double)(Robot.gyroSubsystem.ahrs.getYaw());
    	while(m_degrees < 0)
    	{
    		m_degrees += 360;
    	}
    	while(m_degrees >= 360)
    	{
    		m_degrees -= 360;
    	}
    	desired = m_degrees - current_position;
    	while(desired < 0) //gives the clockwise angle
    	{
    		desired += 360;
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(desired < 180) //shortest way clockwise
    	{
    		Robot.driveTrain.setLeftPercentVBus(.4);
    		Robot.driveTrain.setRightPercentVBus(-.4);
    	}
    	else
    	{
    		Robot.driveTrain.setLeftPercentVBus(-.4);
    		Robot.driveTrain.setRightPercentVBus(.4);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if((Math.abs(Robot.gyroSubsystem.ahrs.getYaw() - m_degrees)) <= ACCEPTABLE_ERROR)
		{
    		return true;
		}
    	else
    		return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.setLeftPercentVBus(0);
		Robot.driveTrain.setRightPercentVBus(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
