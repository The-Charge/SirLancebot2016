// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.SirLancebot2016.subsystems;

import org.usfirst.frc2619.TheChargeDashboard;
import org.usfirst.frc2619.SirLancebot2016.RobotMap;
import org.usfirst.frc2619.SirLancebot2016.commands.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    private final WPI_TalonSRX leftRearMotor = RobotMap.driveTrainLeftRearMotor;
    private final WPI_TalonSRX rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
    private final WPI_TalonSRX rightRearMotor = RobotMap.driveTrainRightRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    public final static double DRIVETRAIN_SPEED_P_CONSTANT = .2;
    private final static double DRIVETRAIN_SPEED_I_CONSTANT = .001;
    private final static double DRIVETRAIN_SPEED_D_CONSTANT = 0;
    private final static double DRIVETRAIN_SPEED_F_CONSTANT = .1;
    
    public final static double DRIVETRAIN_POSITION_P_CONSTANT = 1.1;
    private final static double DRIVETRAIN_POSITION_I_CONSTANT = .0001;
    private final static double DRIVETRAIN_POSITION_D_CONSTANT = 0;
    
    private final static double DRIVETRAIN_SPEED_DEADBAND_CONSTANT = 50;
    private final static double DRIVETRAIN_POSITION_DEADBAND_CONSTANT = 300;
    
    private final static int PID_PROFILE_SPEED = 0;
    private final static int PID_PROFILE_POSITION = 1;

    
    private final static double TICKSPERFOOT = 765; 
    private final static double MAX_TICKS_PER_SECOND = 9200; //TODO: change for new chassis
    
    
    private int driveTrainPositionDeadband;
    private int driveTrainSpeedDeadband;
    
    private final double DEFAULT_DEADBANDX = .15;
    private final double DEFAULT_DEADBANDY = .15;
    private final double DEFAULT_DEADBANDZ = .15;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public DriveTrain()
    {
    	writeDefaultDashboardValues();
    	
    	//________________ FOR PLYBOT 2.2 ________________________
    	leftFrontMotor.setInverted(true);
    	rightFrontMotor.setInverted(true);
    }
    
    private void writeDefaultDashboardValues() {
		//put PID numbers on smart dashboard
    	
    	TheChargeDashboard.putNumber("DriveTrainSpeedP", DRIVETRAIN_SPEED_P_CONSTANT);
    	TheChargeDashboard.putNumber("DriveTrainSpeedI", DRIVETRAIN_SPEED_I_CONSTANT);
    	TheChargeDashboard.putNumber("DriveTrainSpeedD", DRIVETRAIN_SPEED_D_CONSTANT);
    	TheChargeDashboard.putNumber("DriveTrainSpeedF", DRIVETRAIN_SPEED_F_CONSTANT);
    	
    	TheChargeDashboard.putNumber("DriveTrainSpeedDeadband", DRIVETRAIN_SPEED_DEADBAND_CONSTANT);
    	
    	TheChargeDashboard.putNumber("DriveTrainPositionP", DRIVETRAIN_POSITION_P_CONSTANT);
    	TheChargeDashboard.putNumber("DriveTrainPositionI", DRIVETRAIN_POSITION_I_CONSTANT);
    	TheChargeDashboard.putNumber("DriveTrainPositionD", DRIVETRAIN_POSITION_D_CONSTANT);
    	
    	TheChargeDashboard.putNumber("DriveTrainPositionDeadband", DRIVETRAIN_POSITION_DEADBAND_CONSTANT);
    	
		// Joystick Deadband Values
		TheChargeDashboard.putNumber("DeadbandY", DEFAULT_DEADBANDY);
    	TheChargeDashboard.putNumber("DeadbandX", DEFAULT_DEADBANDX);
    	TheChargeDashboard.putNumber("DeadbandZ", DEFAULT_DEADBANDZ);
	}
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveCG());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLeftPercentVBus(double percentvbus){
    	leftFrontMotor.set(percentvbus);
    }
    
    public void setRightPercentVBus(double percentvbus){
    	rightFrontMotor.set(percentvbus);
    }
    
    public void setLeftSpeedPercentage(double percentspeed){
    	leftFrontMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    }
    
    public void setRightSpeedPercentage(double percentspeed){
    	rightFrontMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    }
    
    public void initSpeedPercentageMode(){
    	setControlMode(ControlMode.Velocity);
    	readDashboardControlValues();
    	setProfile(PID_PROFILE_SPEED);
    	
    	//leftFrontMotor.configMaxOutputVoltage(12);
    	//rightFrontMotor.configMaxOutputVoltage(12);
    }
    
    public void initPercentVBusMode(){
    	setControlMode(ControlMode.PercentOutput);
    	readDashboardControlValues();
    	
    	//leftFrontMotor.configMaxOutputVoltage(12);
    	//rightFrontMotor.configMaxOutputVoltage(12);
    }
    
    public void initPositionMode()
    {
    	setControlMode(ControlMode.Position);
    	readDashboardControlValues();
    	setProfile(PID_PROFILE_POSITION);
    	
    	//clear the accumulated I value in the PIDs
    	//leftFrontMotor.ClearIaccum();
    	//rightFrontMotor.ClearIaccum();
    	
    	//leftFrontMotor.configMaxOutputVoltage(6);
    	//rightFrontMotor.configMaxOutputVoltage(6);
    }
    
    public void setLeftPostionFeet(double feet){
    	leftFrontMotor.set(feet);
    }
    
    public void setRightPostionFeet(double feet){
    	rightFrontMotor.set(feet);
    }
    
    private void setProfile(int profile)
    {
    	leftFrontMotor.selectProfileSlot(profile, 0);
    	rightFrontMotor.selectProfileSlot(profile, 0);
    }
    
    private void setControlMode(ControlMode controlmode) {
		//setContronlMode
    	leftFrontMotor.set(controlmode, 0);
    	rightFrontMotor.set(controlmode, 0);
	}
    
    private void zeroEncoders() {
		//zero encoders
    	leftFrontMotor.setSelectedSensorPosition(0, 0, RobotMap.TIMEOUT_MS);
    	rightFrontMotor.setSelectedSensorPosition(0, 0, RobotMap.TIMEOUT_MS);
	}
  //---------------------methods for DriveXFeet command------------------------------------
    public void setDistanceTarget(double distanceInFeet){
    	
    	    	
    	zeroEncoders();
    	
    	double distanceInTicks = distanceInFeet * TICKSPERFOOT;
    	
    	//set distance
    	leftFrontMotor.set(distanceInTicks);
    	rightFrontMotor.set(-1*distanceInTicks);
    }	

	private void readDashboardControlValues() {
		
		setProfile(PID_PROFILE_POSITION);
		
		//set PID variables
    	//double driveTrainPositionP = SmartDashboard.getNumber("DriveTrainPositionP", driveTrainPositionP);
    	//double driveTrainPositionI = SmartDashboard.getNumber("DriveTrainPositionI", driveTrainPositionI);
    	//double driveTrainPositionD = SmartDashboard.getNumber("DriveTrainPositionD", driveTrainPositionD);
    	
    	//driveTrainPositionDeadband = (int)(SmartDashboard.getNumber("DriveTrainPositionDeadband"));
    	
    	//set CANTalon PIDs
    	//leftFrontMotor.setPID(driveTrainPositionP, driveTrainPositionI, driveTrainPositionD);
    	//rightFrontMotor.setPID(driveTrainPositionP, driveTrainPositionI, driveTrainPositionD);
    	
    	//leftFrontMotor.config_kP(1, driveTrainPositionP, RobotMap.TIMEOUT_MS);
    	//leftFrontMotor.config_kI(1, driveTrainPositionI, RobotMap.TIMEOUT_MS);
    	//leftFrontMotor.config_kD(1, driveTrainPositionD, RobotMap.TIMEOUT_MS);

    	//rightFrontMotor.config_kP(1, driveTrainPositionP, RobotMap.TIMEOUT_MS);
    	//rightFrontMotor.config_kI(1, driveTrainPositionI, RobotMap.TIMEOUT_MS);
    	//rightFrontMotor.config_kD(1, driveTrainPositionD, RobotMap.TIMEOUT_MS);
    	
    	//setProfile(PID_PROFILE_SPEED);
		
		//set PID variables
    	//double driveTrainSpeedP = SmartDashboard.getNumber("DriveTrainSpeedP", driveTrainSpeedP);
    	//double driveTrainSpeedI = SmartDashboard.getNumber("DriveTrainSpeedI", driveTrainSpeedI);
    	//double driveTrainSpeedD = SmartDashboard.getNumber("DriveTrainSpeedD", driveTrainSpeedD);
    	//double driveTrainSpeedF = SmartDashboard.getNumber("DriveTrainSpeedF", driveTrainSpeedF);
    	
    	//driveTrainSpeedDeadband = (int)(SmartDashboard.getNumber("DriveTrainSpeedDeadband"));
    	
    	//set CANTalon PIDs
    	
    	//leftFrontMotor.config_kP(1, driveTrainSpeedP, RobotMap.TIMEOUT_MS);
    	//leftFrontMotor.config_kI(1, driveTrainSpeedI, RobotMap.TIMEOUT_MS);
    	//leftFrontMotor.config_kD(1, driveTrainSpeedD, RobotMap.TIMEOUT_MS);
    	//leftFrontMotor.config_kF(1, driveTrainSpeedF, RobotMap.TIMEOUT_MS);

    	//rightFrontMotor.config_kP(1, driveTrainSpeedP, RobotMap.TIMEOUT_MS);
    	//rightFrontMotor.config_kI(1, driveTrainSpeedI, RobotMap.TIMEOUT_MS);
    	//rightFrontMotor.config_kD(1, driveTrainSpeedD, RobotMap.TIMEOUT_MS);
    	//rightFrontMotor.config_kF(1, driveTrainSpeedF, RobotMap.TIMEOUT_MS);
	}
	
	public void writeDashboardDebugValues()
	{
		// Output of Current Encoder Values:
		//TheChargeDashboard.putNumber("LeftFrontEncoder", leftFrontMotor.pidGet());
		//TheChargeDashboard.putNumber("RightFrontEncoder", rightFrontMotor.pidGet());
		
		// Output of Desired Setpoint
		//TheChargeDashboard.putNumber("LeftFrontSetDist", leftFrontMotor.getSetpoint());
		//TheChargeDashboard.putNumber("RightFrontSetDist", leftFrontMotor.getSetpoint());
		
		//Output Speed of Encoders
		//TheChargeDashboard.putNumber("LeftFrontSpeed",leftFrontMotor.getEncVelocity());
		//TheChargeDashboard.putNumber("RightFrontSpeed",rightFrontMotor.getEncVelocity());
	}
    
    public boolean atTarget(){
    	//setting variables to determine atTarget-ness
    	//double leftFrontCurrentValue = leftFrontMotor.pidGet();
    	//double leftFrontDesiredValue = leftFrontMotor.getClosedLoopTarget(0);
    	//double leftFrontError = Math.abs(leftFrontDesiredValue - leftFrontCurrentValue);  //all these are in ticks
    	
    	//double rightFrontCurrentValue = rightFrontMotor.pidGet();
    	//double rightFrontDesiredValue = rightFrontMotor.getClosedLoopTarget(0);
    	//double rightFrontError = Math.abs(rightFrontDesiredValue - rightFrontCurrentValue);
    	
    	//double acceptableError = 25;  //in ticks
    	
    	//check if any of the PIDs in the CANTalons are close enough to the acceptableError
    	//boolean atTargetFlag = false;
    	
    	//if(leftFrontError < acceptableError)
    		//atTargetFlag = true;
    	//else if(rightFrontError < acceptableError)
    		//atTargetFlag = true;
    	//return atTargetFlag;
    	return true;
    }
    
    public void disablePID()
    {
    	setControlMode(ControlMode.PercentOutput);
    }
    

}

