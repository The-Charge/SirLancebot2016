// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.SirLancebot2016.subsystems;

import org.usfirst.frc2619.SirLancebot2016.RobotMap;
import org.usfirst.frc2619.SirLancebot2016.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    private final CANTalon leftMidMotor = RobotMap.driveTrainLeftMidMotor;
    private final CANTalon leftRearMotor = RobotMap.driveTrainLeftRearMotor;
    private final CANTalon rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
    private final CANTalon rightMidMotor = RobotMap.driveTrainRightMidMotor;
    private final CANTalon rightRearMotor = RobotMap.driveTrainRightRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final static double MAX_TICKS_PER_SECOND = 800;
    
    public final static double DRIVETRAIN_SPEED_P_CONSTANT = .01;
    private final static double DRIVETRAIN_SPEED_I_CONSTANT = .01;
    private final static double DRIVETRAIN_SPEED_D_CONSTANT = 0;
    
    private final static double DRIVETRAIN_SPEED_DEADBAND_CONSTANT = 50;
    private int driveTrainSpeedDeadband;
    
    private final static int PID_PROFILE_SPEED = 0;
    private final static int PID_PROFILE_POSITION = 1;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public DriveTrain()
    {
    	writeDefaultDashboardValues();
    }
    
    private void writeDefaultDashboardValues() {
		//put PID numbers on smart dashboard
    	
    	SmartDashboard.putNumber("DriveTrainSpeedP", DRIVETRAIN_SPEED_P_CONSTANT);
    	SmartDashboard.putNumber("DriveTrainSpeedI", DRIVETRAIN_SPEED_I_CONSTANT);
    	SmartDashboard.putNumber("DriveTrainSpeedD", DRIVETRAIN_SPEED_D_CONSTANT);
    	
    	SmartDashboard.putNumber("DriveTrainSpeedDeadband", DRIVETRAIN_SPEED_DEADBAND_CONSTANT);
	}
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveCG());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLeftPercentVBus(double percentvbus){
    	leftFrontMotor.set(percentvbus);
    	leftMidMotor.set(percentvbus);
    	leftRearMotor.set(percentvbus);
    }
    
    public void setRightPercentVBus(double percentvbus){
    	rightFrontMotor.set(percentvbus);
    	rightMidMotor.set(percentvbus);
    	rightRearMotor.set(percentvbus);
    }
    
    public void setLeftSpeedPercentage(double percentspeed){
    	leftFrontMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    	leftMidMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    	leftRearMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    }
    
    public void setRightSpeedPercentage(double percentspeed){
    	rightFrontMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    	rightMidMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    	rightRearMotor.set(percentspeed * MAX_TICKS_PER_SECOND);
    }
    
    public void initSpeedPercentageMode(){
    	setControlMode(TalonControlMode.Speed.getValue());
    	readDashboardControlValues();
    	setProfile(PID_PROFILE_SPEED);
    }
    
    public voide initPercentVBusMode(){
    	setControlMode(TalonControlMode.PercentVbus.getValue());
    	readDashboardControlValues();
    }
    
    public void setControlMode(int controlmode){
    	leftFrontMotor.setControlMode(controlmode);
    	rightFrontMotor.setControlMode(controlmode);
    }
    
    public void setProfile(int profile){
    	leftFrontMotor.setProfile(profile);
    	rightFrontMotor.setProfile(profile);
    }
    
    private void readDashboardControlValues() {
    	setProfile(PID_PROFILE_SPEED);
		
		//set PID variables
    	double driveTrainSpeedP = SmartDashboard.getNumber("DriveTrainSpeedP");
    	double driveTrainSpeedI = SmartDashboard.getNumber("DriveTrainSpeedI");
    	double driveTrainSpeedD = SmartDashboard.getNumber("DriveTrainSpeedD");
    	
    	driveTrainSpeedDeadband = (int)(SmartDashboard.getNumber("DriveTrainSpeedDeadband"));
    	
    	//set CANTalon PIDs
    	leftFrontMotor.setPID(driveTrainSpeedP, driveTrainSpeedI, driveTrainSpeedD);
    	rightFrontMotor.setPID(driveTrainSpeedP, driveTrainSpeedI, driveTrainSpeedD);
    }
    
	public void writeDashboardDebugValues()
	{
		// Output of Current Encoder Values:
		SmartDashboard.putNumber("LeftEncoder", leftFrontMotor.pidGet());
		SmartDashboard.putNumber("RightEncoder", rightFrontMotor.pidGet());
		
		
		//Output Speed of Encoders
		SmartDashboard.putNumber("LeftSpeed",leftFrontMotor.getEncVelocity());
		SmartDashboard.putNumber("RightSpeed",rightFrontMotor.getEncVelocity());
	}
}

