// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.SirLancebot2016.subsystems;

import org.usfirst.frc2619.SirLancebot2016.Robot;
import org.usfirst.frc2619.SirLancebot2016.RobotMap;
import org.usfirst.frc2619.SirLancebot2016.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Shooter extends Subsystem {

	private final static double SPEED_P_CONSTANT = .75;
    private final static double SPEED_I_CONSTANT = .01;
    private final static double SPEED_D_CONSTANT = 0;
    private final static double POT_SPEED_SETTING = Robot.oi.dragon.getX();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooterTop = RobotMap.shooterShooterTop;
    private final CANTalon shooterBottom = RobotMap.shooterShooterBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public Shooter()
    {
    	writeDefaultDashboardValues();
    	initSpeedMode();
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    private void writeDefaultDashboardValues() {
    	SmartDashboard.putNumber("ShooterSpeedP", SPEED_P_CONSTANT);
    	SmartDashboard.putNumber("ShooterSpeedI", SPEED_I_CONSTANT);
    	SmartDashboard.putNumber("ShooterSpeedD", SPEED_D_CONSTANT);
    	SmartDashboard.putNumber("ShooterSpeedFromPot", POT_SPEED_SETTING);
	}
    
    public void readDashboardControlValues()
    {
    	double SpeedP = SmartDashboard.getNumber("ShooterSpeedP");
    	double SpeedI = SmartDashboard.getNumber("ShooterSpeedI");
    	double SpeedD = SmartDashboard.getNumber("ShooterSpeedD");
    	
    	//set CANTalon PIDs
    	shooterTop.setPID(SpeedP, SpeedI,SpeedD);
    	shooterBottom.setPID(SpeedP,SpeedI,SpeedD);	
    }
    
    public void writeDashboardDebugValues()
	{
		//Output Speed of Encoders
		SmartDashboard.putNumber("ShooterTopSpeed",shooterTop.getEncVelocity());
		SmartDashboard.putNumber("ShooterBottomSpeed",shooterBottom.getEncVelocity());
		
		SmartDashboard.putNumber("ShooterSpeedFromPot", Robot.oi.dragon.getX());
	}
    
    private void initSpeedMode()
    {
    	shooterTop.setControlMode(CANTalon.TalonControlMode.Speed.getValue());
    	shooterBottom.setControlMode(CANTalon.TalonControlMode.Speed.getValue());
    }
    
    public void shoot(double speed)
    {
    	shooterTop.set(speed);
    	shooterBottom.set(speed);
    }
    
    public void off()
    {
    	shooterTop.set(0);
    	shooterBottom.set(0);
    }
    
    public void initPercentVBusMode(){
    	setControlMode(TalonControlMode.PercentVbus.getValue());
    	readDashboardControlValues();
    	
    	shooterTop.configMaxOutputVoltage(12);
    	shooterBottom.configMaxOutputVoltage(12);
    }
    
    private void setControlMode(int controlmode) {
		//setContronlMode
    	shooterTop.setControlMode(controlmode);
    	shooterBottom.setControlMode(controlmode);
	}
}

